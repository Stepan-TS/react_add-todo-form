{"version":3,"sources":["types/index.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["Error","UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","todosWithUsers","App","useState","setTodos","newTodoTitle","setNewTodoTitle","selectedUserId","setSelectedUserId","showTitleError","setShowTitleError","showUserError","setShowUserError","getIdByMaxArrayValue","length","action","method","onSubmit","event","preventDefault","newTodo","addNewTodo","type","placeholder","value","onChange","validTitle","target","replace","TitleAbsence","Number","disabled","UserAbsence","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43a5fae9.chunk.js","sourcesContent":["export interface User {\n  id: number,\n  name: string,\n  username: string,\n  email: string,\n}\n\nexport interface Todo {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n  user: User | null;\n}\n\nexport enum Error {\n  UserAbsence = 'Please choose a user',\n  TitleAbsence = 'Please enter a title',\n}\n","import { User } from '../../types';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user\n        && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo, Error } from './types';\n\nconst getUserById = (userId: number) => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todosWithUsers = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(todosWithUsers);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const [showTitleError, setShowTitleError] = useState(false);\n  const [showUserError, setShowUserError] = useState(false);\n\n  const getIdByMaxArrayValue = todos.length;\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const validTitle = event.target.value.replace(/[^a-zA-Za-яA-Я ]/g, '');\n\n    setNewTodoTitle(validTitle);\n  };\n\n  const addNewTodo = (title: string, userId: number, id: number) => {\n    const newTodo: Todo = {\n      id,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setShowTitleError(!newTodoTitle);\n    setShowUserError(!selectedUserId);\n\n    if (newTodoTitle && selectedUserId) {\n      addNewTodo(newTodoTitle, selectedUserId, getIdByMaxArrayValue);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={newTodoTitle}\n            onChange={handleTitleChange}\n          />\n\n          {showTitleError\n            && !newTodoTitle\n              && (\n                <span className=\"error\">{Error.TitleAbsence}</span>\n              )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(Number(event.target.value))}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {showUserError\n            && !selectedUserId\n              && (\n                <span className=\"error\">{Error.UserAbsence}</span>\n              )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}